angular.module("chartApp").controller("historicalDataChartCtlr", function ($scope,$rootScope){

	var historicalChartWidth;
	var historicalChartHeight;
	var xScaleHistoricChart;
	var yScaleHistoricChart;
	var xAxisHistoricChart;
	var yAxisHistoricChart;
	var historicChartSvg;
	var historicChartMinX;
	var historicChartMaxX;
	var historicChartMinY;
	var historicChartMaxY;
	
	var numbars='250';
	//var startDate='2013-06-10';//getDate('start',1);
	//var endDate='2014-05-10';//getDate('end','')
	var startDate=getDate('start',1,true);
	var endDate=getDate('end','')
	var historicChartData=[];
	var	parseDate = d3.time.format("%Y-%m-%d");
	//var formatDate = d3.time.format("%e-%b-%Y");
	var formatDate = d3.time.format("%e,%b,%Y");
	var closeDataArray;
	var dateArray;
	var demaDataArray;
	var cmfDataArray;
	var margin={right:50,bottom:30,xAxisBottom:3,top:35};
	var	closeLine;
	var demaLine;
	var panningAndZooming;
	var xMinDate;
	var xMaxDate;
	var xMin;
	var xMax;
	var closeDifferenceSvg;
	var closeDifferenceArray=[];
	var scalableLimit=2;
	var yScaleCloseDifference;
	var turningPoints;
	var yScaleCmfChart;
	var subsetCMF=[];	
	var sortOrder = false;
	var area;
	//historicalChartHeight=(historicalChartHeight/2.5);
	function calculateDimension(){
		historicalChartWidth=$('#historicalDataChart').width()-35;
		historicalChartHeight=$('#historicalDataChart').height()*.90-15;
	}
	function initHistoricChart(){
		calculateDimension();
		getHistoricData();
		//$scope.drawComparitiveChart();
	}
	initHistoricChart();
	
	$scope.drawHistoricCharts=function(){
		console.log('api called ');
		getHistoricData();
	}
	$rootScope.$on('showHistoricChartForSymbol', function(e,msg,switchSymbol) { 
			console.log("stop chart broadcast event "+msg +" :switch symbol "+switchSymbol);
			if(historicChartData.length == 0){
				return;
			}
			if(msg){
				getHistoricData();
			}
			else{
				drawCharts();
			}
	});
	
	function sortTheBars(a,b,sortByAscending){
		var aClose=a.close;
		var bClose=b.close;
		if(sortByAscending){
			if(!isNaN(a.close) && a.close!=null){
				if(a.close>b.close){
					return 1;
				}
				else if(a.close<b.close){
					return -1;
				}
				else{
					return 0;
				}
			}
			else{
				return 0;
			}
		}
		else{
			if(!isNaN(a.close) && a.close!=null){
				if(a.close>b.close){
					return -1;
				}
				else if(a.close<b.close){
					return 1;
				}
				else{
					return 0;
				}
			}
			else{
				return 0;
			}
		}
	
	}
	$(document).ready(function(){
	//$('.sortButton').click(function(){
			//alert("inSorting");
				
			//});
	});
	
	$(window).resize(function () {
		console.log('window resize ');
		calculateDimension();
		//StockMarketChartManager.updateChartOnResize();
		//drawCharts();
	});
	var i=0;
	function drawCharts(){
		/*
		$('#cmf').html('');
		$('#closeDemaChartDiv').html('');
		$('#closePriceDifferenceChartDiv').html('');
		generateXScale();
		if($scope.$parent.areaChart){
			drawCMFChart();
		}
		if($scope.$parent.barChart){
			drawCloseDemaChart();
		}
		if($scope.$parent.candleChart){
			drawCloseDifferenceChart();
		}
		drawXAxis();
		panningAndZooming=d3.behavior.zoom().x(xScaleHistoricChart).scaleExtent([1, 8]).on("zoom", zoom);					
		d3.select('#historicalDataChart').call(panningAndZooming);
		
		i++;
		*/
		
		if($scope.$parent.changeInValue == "area"){
			
			if(!$scope.$parent.areaChart){
				StockMarketChartManager.hideChart("hlcChart");
				return ;
			}else{
				StockMarketChartManager.showChart("hlcChart");
				return ;
			}
		}
		
		if($scope.$parent.changeInValue == "bar"){
			if(!$scope.$parent.barChart){
				StockMarketChartManager.hideChart("cmfChart");
				return ;
			}else{
				StockMarketChartManager.showChart("cmfChart");
				return ;
			}
		}
		
		if($scope.$parent.changeInValue == "candle"){
			if(!$scope.$parent.candleChart){
				StockMarketChartManager.hideChart("powerGaugeChart");
				return ;
			}else{
				StockMarketChartManager.showChart("powerGaugeChart");
				return;
			}
		}
	}
	 $scope.sortBars=function(){
		sortOrder = !sortOrder;
		//alert("sort "+sortOrder);
		sortItems = function (a, b) {
			var sortStatus=0;
			//console.log("sort by "+sortOrder);
		//alert("   "+a+"   "+b);
			if (sortOrder) {
				return sortTheBars(a,b,true);
				//return a.close - b.close;
			}
			else{
				return sortTheBars(a,b,false);
			}
			//return b.close - a.close;
		};

		historicChartSvg.selectAll(".closeBar")
			.sort(sortItems)
			.transition()
		    .attr("fill", function(d,i) {
				//return "rgb("+(i * 2)+", "+(i * 1)+", " + (i* 1) + ")";
				return "#3f97fe";
			})
			.delay(function (d, i) {
				return i * 20;
			})
			.duration(1000)
			.attr("y", function (d, i) {
				return yScaleHistoricChart(d.close);
			})
			.attr("x", function (d, i) {
				//alert(xScaleHistoricChart(parseDate.parse(d.timeIndex)));
				return xScaleHistoricChart(parseDate.parse(d.timeIndex));
			});
	}

	function initialiseChart(){
		/*
		$('#cmf').html("");
		$('#closeDemaChartDiv').html("");
		$('#closePriceDifferenceChartDiv').html("");
		
		historicChartMaxY=d3.max(closeDataArray, function(d) { return d; });
		historicChartMinY=d3.min(closeDataArray, function(d) { return d; });
		var interVal=$scope.$parent.historicChartInterval;
		
		if(interVal == '1M' || interVal == '3M'){
			formatDate = d3.time.format("%e%b| %Y");
		}
		else {
			formatDate = d3.time.format("%b| %Y");
		}
		
		drawCharts();
		*/
		var staticData={"interval":"1D","symbol":"AAL","dates":["2015-02-06","2015-02-05","2015-02-04","2015-02-03","2015-02-02","2015-01-30","2015-01-29","2015-01-28","2015-01-27","2015-01-26","2015-01-23","2015-01-22","2015-01-21","2015-01-20","2015-01-16","2015-01-15","2015-01-14","2015-01-13","2015-01-12","2015-01-09","2015-01-08","2015-01-07","2015-01-06","2015-01-05","2015-01-02","2014-12-31","2014-12-30","2014-12-29","2014-12-26","2014-12-24","2014-12-23","2014-12-22","2014-12-19","2014-12-18","2014-12-17","2014-12-16","2014-12-15","2014-12-12","2014-12-11","2014-12-10","2014-12-09","2014-12-08","2014-12-05","2014-12-04","2014-12-03","2014-12-02","2014-12-01","2014-11-28","2014-11-26","2014-11-25","2014-11-24","2014-11-21","2014-11-20","2014-11-19","2014-11-18","2014-11-17","2014-11-14","2014-11-13","2014-11-12","2014-11-11","2014-11-10","2014-11-07","2014-11-06","2014-11-05","2014-11-04","2014-11-03","2014-10-31","2014-10-30","2014-10-29","2014-10-28","2014-10-27","2014-10-24","2014-10-23","2014-10-22","2014-10-21","2014-10-20","2014-10-17","2014-10-16","2014-10-15","2014-10-14","2014-10-13","2014-10-10","2014-10-09","2014-10-08","2014-10-07","2014-10-06","2014-10-03","2014-10-02","2014-10-01","2014-09-30","2014-09-29","2014-09-26","2014-09-25","2014-09-24","2014-09-23","2014-09-22","2014-09-19","2014-09-18","2014-09-17","2014-09-16","2014-09-15","2014-09-12","2014-09-11","2014-09-10","2014-09-09","2014-09-08","2014-09-05","2014-09-04","2014-09-03","2014-09-02","2014-08-29","2014-08-28","2014-08-27","2014-08-26","2014-08-25","2014-08-22","2014-08-21","2014-08-20","2014-08-19","2014-08-18","2014-08-15","2014-08-14","2014-08-13","2014-08-12","2014-08-11","2014-08-08","2014-08-07","2014-08-06","2014-08-05","2014-08-04","2014-08-01","2014-07-31","2014-07-30","2014-07-29","2014-07-28","2014-07-25","2014-07-24","2014-07-23","2014-07-22","2014-07-21","2014-07-18","2014-07-17","2014-07-16","2014-07-15","2014-07-14","2014-07-11","2014-07-10","2014-07-09","2014-07-08","2014-07-07","2014-07-03","2014-07-02","2014-07-01","2014-06-30","2014-06-27","2014-06-26","2014-06-25","2014-06-24","2014-06-23","2014-06-20","2014-06-19","2014-06-18","2014-06-17","2014-06-16","2014-06-13","2014-06-12","2014-06-11","2014-06-10","2014-06-09","2014-06-06","2014-06-05","2014-06-04","2014-06-03","2014-06-02","2014-05-30","2014-05-29","2014-05-28","2014-05-27","2014-05-23","2014-05-22","2014-05-21","2014-05-20","2014-05-19","2014-05-16","2014-05-15","2014-05-14","2014-05-13","2014-05-12","2014-05-09","2014-05-08","2014-05-07","2014-05-06","2014-05-05","2014-05-02","2014-05-01","2014-04-30","2014-04-29","2014-04-28","2014-04-25","2014-04-24","2014-04-23","2014-04-22","2014-04-21","2014-04-17","2014-04-16","2014-04-15","2014-04-14","2014-04-11","2014-04-10","2014-04-09","2014-04-08","2014-04-07","2014-04-04","2014-04-03","2014-04-02","2014-04-01","2014-03-31","2014-03-28","2014-03-27","2014-03-26","2014-03-25","2014-03-24","2014-03-21","2014-03-20","2014-03-19","2014-03-18","2014-03-17","2014-03-14","2014-03-13","2014-03-12","2014-03-11","2014-03-10","2014-03-07","2014-03-06","2014-03-05","2014-03-04","2014-03-03","2014-02-28","2014-02-27","2014-02-26","2014-02-25","2014-02-24","2014-02-21","2014-02-20","2014-02-19","2014-02-18","2014-02-14","2014-02-13","2014-02-12","2014-02-11"],"slices":[{"percentage":"0.56","name":"","referencelines":[{}],"indicators":[{"pivot":"0","drawStyle":"BandLine","name":"upperBand","data":[null,null,null,null,null,null,null,null,null,null,null,null,null,"56.25","56.11","56.23","56.32","56.29","56.36","56.25","56.24","56.09","56.06","55.87","55.64","55.36","55.18","55.37","54.98","54.62","54.19","53.86","53.58","53.21","52.77","52.23","51.73","51.30","50.87","50.36","50.13","49.58","49.30","48.79","48.42","48.02","47.70","47.22","46.41","46.10","45.87","45.74","45.77","45.40","45.26","44.82","44.40","44.17","43.83","43.59","43.14","42.54","42.12","41.64","41.22","40.84","40.76","40.46","40.24","40.07","39.82","39.63","39.39","39.01","38.91","38.67","38.69","38.81","38.76","38.83","38.78","38.93","39.11","39.33","39.49","39.64","39.70","39.72","39.96","40.25","40.35","40.52","40.62","40.73","40.86","41.02","41.19","41.28","41.40","41.62","41.68","41.87","41.91","41.85","41.85","41.91","42.01","42.09","42.04","42.04","41.92","41.98","42.03","42.15","42.38","42.54","42.84","43.00","43.08","43.18","43.26","43.45","43.54","43.79","44.05","44.23","44.51","44.77","44.97","45.12","45.21","45.49","45.66","45.85","45.99","46.07","46.22","46.22","46.25","46.44","46.49","46.44","46.40","46.40","46.29","46.46","46.54","46.43","46.42","46.48","46.52","46.60","46.40","46.31","46.09","45.90","45.68","45.36","45.06","44.73","44.35","44.12","43.91","43.69","43.52","43.37","43.02","42.84","42.57","42.29","41.91","41.62","41.23","40.96","40.78","40.59","40.36","40.29","40.19","40.28","40.30","40.23","40.12","39.96","39.93","39.85","39.74","39.59","39.58","39.64","39.70","39.75","39.79","39.89","40.04","40.11","40.24","40.29","40.24","40.31","40.05","40.09","40.09","40.13","40.20","40.18","40.25","40.33","40.52","40.40","40.39","40.38","40.43","40.55","40.48","40.45","40.37","40.32","40.31","40.23","40.13","39.98","39.94","39.96","39.89","39.73","39.59","39.41","39.24","39.05","38.95","38.80","38.58","38.27","37.96","37.87","37.65","37.50","37.37","37.34","37.21","36.99","36.76","36.50","36.21","35.97","35.73","35.44","35.08","34.81"],"drawType":"Line"},{"pivot":"0","drawStyle":"BandLine","name":"lowerBand","data":[null,null,null,null,null,null,null,null,null,null,null,null,null,"47.18","46.94","46.64","46.69","46.77","46.71","46.76","46.42","46.30","46.14","46.01","45.70","45.41","45.04","44.38","44.02","43.63","43.28","42.96","42.60","42.34","42.29","42.35","42.47","42.26","42.07","41.90","41.64","41.71","41.26","40.94","40.65","40.45","40.15","39.91","39.90","39.76","39.59","39.39","38.91","38.59","38.14","37.65","37.09","36.26","35.42","34.52","33.55","32.91","32.27","31.78","31.42","31.06","30.59","30.19","29.84","29.58","29.34","29.15","28.96","29.11","29.05","29.07","29.18","29.51","29.98","30.51","31.09","31.81","32.32","32.73","33.04","33.29","33.51","33.70","33.96","34.24","34.47","34.70","34.89","35.14","35.33","35.60","35.81","36.10","36.20","36.29","36.34","36.39","36.40","36.40","36.34","36.21","35.98","35.86","35.79","35.69","35.71","35.64","35.63","35.57","35.45","35.50","35.43","35.63","35.71","35.82","35.95","36.00","36.28","36.56","36.82","37.11","37.37","37.59","37.66","37.79","38.03","37.99","38.30","38.43","38.71","39.04","39.11","39.20","39.28","39.29","39.30","39.32","39.37","39.15","38.94","38.50","38.36","38.56","38.72","39.00","39.18","39.22","39.37","39.20","39.16","38.95","38.72","38.61","38.52","38.31","38.10","37.87","37.70","37.60","37.49","37.49","37.75","37.66","37.42","37.19","36.93","36.68","36.47","36.27","36.00","35.70","35.52","35.15","34.93","34.66","34.48","34.35","34.22","34.07","33.81","33.47","33.06","32.67","32.29","32.10","31.83","31.64","31.59","31.56","31.53","31.61","31.62","31.56","31.67","31.67","31.74","31.79","31.85","31.95","32.04","32.24","32.56","32.75","32.86","33.19","33.31","33.61","33.86","33.96","34.08","34.07","33.98","34.06","34.18","34.36","34.49","34.52","34.49","34.43","34.32","34.21","34.07","33.99","34.00","34.05","33.96","33.88","33.69","33.50","33.35","33.08","32.93","32.87","32.62","32.21","31.72","31.31","31.03","30.82","30.63","30.43","30.20","29.96","29.74","29.43"],"drawType":"Line"},{"pivot":"0","drawStyle":"Signal","name":"Signals","datadrawType":"Signal"},{"pivot":"0","drawStyle":"ChaikinTrendLine","name":"chaikinTrend20001","data":[null,null,null,null,null,null,null,null,null,null,null,null,null,"34.47","34.47","34.42","34.42","34.42","34.37","46.56","46.40","46.20","46.01","45.81","45.59","45.38","45.16","44.94","44.73","44.54","44.35","44.19","44.00","43.82","43.65","43.50","43.37","43.17","42.99","42.80","42.63","42.48","42.27","42.05","41.86","41.70","41.53","41.37","41.19","41.08","40.98","40.90","40.82","40.72","40.61","40.49","40.39","40.29","40.18","40.08","39.98","39.87","39.77","39.67","39.59","39.50","39.42","39.35","39.30","39.26","39.21","39.17","39.12","39.11","39.12","39.12","39.17","39.25","39.35","39.47","39.60","39.79","39.93","40.06","40.17","40.25","40.32","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00"],"drawType":"Line"},{"pivot":"0","drawStyle":"ohlcOpenHighLowCloseStyle","name":"High-Low-Close","data":["null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","null,null,null","52.83,49.93,52.75","49.97,48.27,49.81","50.40,48.58,49.41","50.23,48.10,49.41","51.43,49.46,50.40","51.45,49.20,49.58","53.91,51.82,52.02","54.28,53.25,53.66","53.65,52.12,53.01","54.43,52.13,53.04","54.54,53.34,53.88","54.60,53.07,53.91","54.64,53.32,53.63","53.70,52.83,53.42","53.24,51.30,52.85","52.25,51.06,51.95","51.69,50.35,51.43","51.14,49.84,50.21","51.88,50.72,50.84","50.94,49.10,50.71","50.93,47.50,50.14","49.49,46.05,48.80","51.15,47.68,47.96","51.32,49.32,50.84","51.70,49.90,49.97","51.50,49.65,50.53","50.40,48.25,48.94","49.20,47.39,48.31","51.32,50.15,50.82","51.75,50.01,51.01","50.27,49.32,49.65","48.47,46.92,48.24","48.70,47.15,47.86","49.47,47.36,47.88","49.45,47.00,48.53","45.75,44.00,44.97","44.44,43.10,44.15","43.96,42.78,43.21","44.49,43.25,43.31","44.72,43.20,44.16","45.40,44.04,44.10","45.46,43.76,45.05","44.58,43.63,43.69","44.54,43.66,44.01","44.46,43.49,44.12","43.63,42.84,43.43","44.47,43.32,43.44","43.94,41.67,43.83","43.49,42.63,43.20","44.13,42.59,43.14","43.35,42.09,42.25","43.70,42.50,42.70","42.10,41.43,42.00","41.75,40.79,41.35","40.69,39.61,40.30","40.40,39.24,39.94","40.76,39.75,40.24","40.40,39.29,39.91","39.95,38.58,39.82","40.18,36.79,38.48","38.22,36.94,37.04","37.88,36.02,37.85","35.39,34.00,35.22","34.34,32.81,33.38","33.40,30.00,32.97","32.61,29.49,31.69","32.18,29.28,31.51","31.39,28.10,28.58","32.25,29.78,30.78","33.70,31.94,31.98","34.54,32.60,33.00","35.02,34.06,34.09","36.50,34.86,34.93","36.32,34.61,36.23","35.38,33.51,33.93","34.94,33.85,34.39","35.85,34.34,35.48","35.75,34.94,35.03","36.11,35.02,35.93","35.97,34.86,35.21","36.34,35.18,36.12","35.77,34.64,35.33","37.00,35.44,35.58","38.25,36.63,36.63","38.11,37.60,38.05","38.24,37.04,37.46","38.01,36.81,37.98","37.79,36.84,37.07","38.51,37.63,37.65","39.04,37.93,38.09","38.86,37.90,38.58","38.68,37.38,37.96","38.40,37.96,38.23","38.71,37.71,37.85","39.97,38.36,38.47","39.90,38.67,39.14","40.54,38.89,40.50","39.35,38.36,38.88","39.40,38.70,39.17","39.40,38.68,38.99","39.75,39.07,39.09","40.28,39.40,39.42","40.21,39.54,39.85","40.85,39.44,39.51","40.79,40.03,40.60","41.00,40.26,40.43","40.90,39.60,40.66","40.08,38.79,39.19","39.61,38.46,39.57","38.46,37.44,38.12","38.14,37.27,37.52","38.36,37.35,37.97","37.38,35.22,37.18","38.40,36.50,36.86","38.00,36.14,37.46","38.45,36.74,37.18","39.85,37.63,38.14","39.53,38.43,39.43","39.40,38.04,38.85","40.26,39.29,39.55","40.85,39.39,39.53","41.95,39.81,40.29","42.68,41.33,41.68","43.95,41.70,42.16","43.66,42.65,43.33","42.89,42.15,42.38","42.95,42.25,42.48","43.22,42.15,42.92","43.44,41.65,41.70","44.00,43.30,43.48","43.73,42.78,43.70","43.59,42.73,42.98","43.23,42.52,42.88","42.98,40.77,42.82","42.35,40.51,41.99","40.33,37.90,40.26","41.72,39.92,40.10","42.94,41.40,41.62","42.95,41.42,41.95","43.90,43.05,43.86","44.08,42.83,42.96","44.75,43.91,44.00","44.60,43.50,44.55","44.00,42.30,43.91","44.61,42.76,43.18","44.88,43.80,44.36","44.55,43.03,44.55","43.49,42.66,43.06","42.82,41.57,42.66","42.19,40.76,41.87","41.29,39.67,41.06","40.92,39.54,40.38","41.41,38.85,40.20","43.29,42.03,42.29","43.86,42.93,43.66","44.43,43.07,43.59","43.92,42.42,43.88","43.49,42.27,42.41","42.90,41.20,42.82","42.09,41.11,41.44","41.25,40.00,41.22","40.18,39.68,40.16","40.27,39.36,39.82","40.33,39.19,39.80","39.93,39.22,39.35","39.50,38.53,39.11","38.88,38.29,38.72","38.85,38.04,38.32","38.88,38.02,38.24","39.15,38.10,38.57","38.68,37.76,38.53","38.72,37.47,38.19","39.24,38.56,38.84","39.74,38.85,39.31","39.49,38.35,39.39","38.70,37.90,38.26","38.25,37.04,38.25","37.31,36.31,37.22","37.40,36.39,36.67","36.78,35.79,36.60","36.72,36.06,36.49","36.70,35.47,36.39","35.88,34.89,35.07","35.65,34.97,35.51","36.72,34.34,35.16","37.11,35.90,36.00","38.24,35.79,37.26","37.60,36.40,37.09","36.74,35.75,36.16","35.79,34.86,35.67","35.86,34.82,35.40","35.59,33.94,35.51","34.33,31.86,33.72","34.77,32.77,33.37","35.46,33.59,33.68","37.38,34.60,35.29","37.00,35.15,36.90","36.22,33.61,35.98","37.47,35.46,35.78","37.72,36.29,36.56","38.44,36.96,37.34","38.90,37.47,37.71","38.19,36.85,37.94","36.86,35.75,36.60","36.50,35.35,35.39","36.77,35.02,35.77","38.26,36.64,36.70","38.20,36.86,37.90","36.86,36.03,36.80","36.82,35.90,36.11","37.09,36.28,36.56","37.63,36.68,37.08","38.04,37.09,37.35","37.77,36.53,37.70","37.18,35.67,36.34","37.99,35.75,36.74","38.08,37.22,37.56","39.26,37.95,38.08","39.88,38.54,38.96","39.29,38.11,39.02","39.33,38.28,38.81","38.03,37.51,37.86","37.46,36.57,37.34","36.40,35.32,36.10","36.97,36.07,36.93","36.95,36.34,36.56","37.28,36.58,36.75","37.15,36.51,37.00","36.65,36.02,36.65","36.45,35.75,36.17","35.67,34.43,35.66","35.09,34.11,34.59","34.95,34.20,34.31","35.18,34.22,34.41","35.04,34.06,35.03","35.00,34.36,34.69","35.64,34.39,35.13"],"drawType":"HLC"},{"pivot":"0","drawStyle":"BandLine","name":"EMA","data":[null,null,null,null,null,null,null,null,null,null,null,null,null,"50.96","50.78","50.88","51.03","51.19","51.27","51.44","51.38","51.16","50.97","50.77","50.45","50.11","49.76","49.39","49.05","48.76","48.49","48.32","48.07","47.80","47.57","47.45","47.40","47.05","46.76","46.38","46.13","45.91","45.42","44.86","44.38","44.00","43.61","43.19","42.65","42.42","42.25","42.16","42.04","41.83","41.60","41.26","41.02","40.72","40.38","40.07","39.74","39.33","38.94","38.52","38.15","37.70","37.27","36.86","36.51","36.17","35.77","35.35","34.91","34.55","34.30","33.95","33.82","33.86","33.95","34.18","34.45","35.03","35.46","35.81","36.09","36.29","36.43","36.45","36.70","36.93","37.07","37.28","37.42","37.64","37.79","38.03","38.28","38.45","38.49","38.59","38.65","38.81","38.93","39.01","39.05","39.16","39.26","39.40","39.49","39.53","39.43","39.49","39.52","39.57","39.62","39.64","39.62","39.63","39.54","39.45","39.33","39.34","39.32","39.44","39.63","39.80","40.06","40.38","40.67","41.02","41.31","41.50","41.77","41.99","42.23","42.43","42.50","42.54","42.46","42.47","42.47","42.42","42.50","42.40","42.27","42.20","42.13","42.06","42.07","42.25","42.47","42.55","42.61","42.49","42.44","42.29","42.06","41.87","41.74","41.48","41.18","40.99","40.82","40.72","40.68","40.72","40.77","40.62","40.31","39.99","39.60","39.32","38.97","38.72","38.47","38.30","38.15","37.98","37.85","37.72","37.62","37.55","37.49","37.38","37.26","37.17","37.00","36.77","36.51","36.34","36.15","36.04","35.98","35.92","35.86","35.81","35.88","35.92","36.00","36.00","35.87","35.75","35.71","35.75","35.78","35.81","36.02","36.29","36.55","36.67","36.65","36.72","36.81","36.84","36.79","36.70","36.57","36.57","36.69","36.78","36.79","36.68","36.67","36.73","36.75","36.71","36.65","36.55","36.57","36.55","36.45","36.29","36.02","35.72","35.41","35.17","34.95","34.84","34.63","34.43","34.20","33.92","33.65","33.40","33.17","33.03","32.91","32.76","32.53","32.31"],"drawType":"Line"}],"gridlines":[{"interval":"0.2"}]},{"labelYaxis":true,"percentage":"0.16","name":"Chaikin Money Flow","indicators":[{"pivot":"0","drawStyle":"ChaikinMoneyFlowBar","name":"cmf","data":[null,null,null,null,null,null,null,null,null,null,null,null,null,"11.79","11.56","0.55","3.74","-2.64","-2.67","-0.73","2.85","4.24","4.39","3.80","6.30","5.60","4.92","5.50","4.24","5.14","3.21","1.17","4.00","-5.27","-5.89","-13.64","-8.46","-10.23","-4.02","-7.02","-0.21","0.78","-1.76","-6.16","-8.87","-9.04","-7.80","-3.69","-4.66","-5.40","-7.41","-0.40","3.13","-3.47","8.67","9.65","10.56","16.39","18.73","20.76","15.52","10.52","4.43","2.21","2.04","2.03","3.75","0.55","-0.12","0.36","-0.86","0.04","-4.28","-3.20","1.41","-7.52","-14.60","-13.05","-19.51","-24.57","-32.55","-29.63","-32.55","-24.26","-20.27","-15.64","-14.34","-25.29","-22.17","-17.87","-20.81","-17.54","-21.08","-22.27","-28.90","-31.73","-31.30","-20.87","-24.66","-18.84","-24.32","-16.32","-10.84","-8.43","-9.12","1.26","-2.97","3.91","6.88","4.83","3.18","4.22","0.82","-3.11","-4.61","-3.85","-8.15","-3.30","-5.74","-5.21","-6.59","-10.59","-16.32","-13.63","-13.73","-14.59","-18.30","-9.31","-0.14","-2.68","-2.66","-7.75","-5.61","-6.92","-14.53","-8.00","-2.59","-1.39","-2.35","11.48","11.62","12.90","19.10","22.52","20.72","20.39","18.03","16.75","12.95","9.98","11.55","16.24","17.62","17.93","23.87","36.86","33.84","28.77","32.11","34.18","22.15","21.83","18.46","17.98","14.70","13.22","14.23","23.15","20.12","28.17","25.74","26.79","23.99","26.98","24.84","16.69","19.51","16.71","15.72","15.95","15.00","15.11","19.00","19.65","23.10","25.49","23.17","16.53","8.69","13.24","13.01","7.45","6.95","3.91","-0.25","0.22","3.59","-0.86","0.19","0.73","-0.55","0.94","3.98","-2.94","-3.69","-11.37","-11.70","-9.86","-3.86","-0.89","-10.63","-20.66","-13.92","-10.67","-7.16","1.41","0.03","1.43","3.88","1.81","7.65","8.29","6.19","15.29","16.31","13.78","12.74","12.81","13.23","15.02","13.27","24.62","30.34","29.85","31.13","30.62","26.72","25.56","24.38","30.48","34.14","30.62","30.72","32.55","31.11","34.97","38.86","37.45","34.20","30.84"],"drawType":"Bar"}]},{"percentage":"0.12","name":"Overbought/Oversold","referencelines":[{"value":30},{"value":70}],"indicators":[{"pivot":"0","drawStyle":"OBOSLine","name":"Overbought/Oversold","data":[null,null,null,null,null,null,null,null,null,null,null,null,null,"16.93","16.04","20.68","27.13","35.31","45.42","57.23","69.51","79.09","86.72","87.87","85.62","82.38","78.00","71.53","63.81","55.26","47.39","43.87","40.61","41.32","47.79","58.55","68.02","70.60","73.69","75.16","76.84","75.06","67.39","58.10","48.08","39.92","32.03","23.23","14.98","10.85","10.80","13.74","17.21","21.05","24.47","25.89","29.40","28.99","31.64","40.17","49.48","57.74","73.01","86.76","96.63","97.82","97.13","96.25","95.14","93.81","91.83","89.28","86.05","81.80","76.11","68.91","60.07","49.82","39.22","31.10","30.20","37.73","45.27","53.93","59.06","56.12","49.01","42.85","45.48","43.98","39.26","36.47","29.54","25.18","19.57","21.06","23.09","20.84","14.28","13.10","12.79","14.91","15.59","15.08","16.03","20.19","25.86","32.79","40.36","47.10","54.02","66.88","76.94","84.16","88.25","88.72","87.73","85.38","80.62","74.39","66.28","55.88","42.87","27.22","14.28","8.91","9.19","11.26","13.78","17.61","21.93","27.12","35.07","45.22","57.21","70.12","81.09","83.32","80.04","77.13","73.11","67.96","61.94","53.53","46.53","40.86","36.57","35.40","39.23","48.18","60.00","71.69","79.05","78.04","75.80","69.43","62.04","55.20","47.73","38.75","31.72","29.98","32.47","39.78","50.48","62.64","74.19","82.59","82.44","80.09","76.05","72.70","65.76","58.78","49.46","41.96","40.49","40.16","42.76","48.04","56.08","63.03","68.29","74.50","79.30","80.88","77.70","71.71","65.05","58.85","55.72","60.39","66.61","71.09","73.92","75.51","78.15","79.30","78.56","74.32","67.55","58.61","48.57","33.53","31.17","32.87","40.10","49.55","57.06","58.37","58.05","60.51","61.63","55.71","44.73","31.71","19.74","14.57","16.02","14.56","12.50","11.47","14.08","17.89","22.09","25.93","30.10","36.69","47.13","59.26","72.14","82.70","83.27","79.01","74.70","70.32","67.79","66.92","61.84","56.03","47.68","37.95","29.77","26.25","28.65","37.05","47.11","58.38","68.90","76.32"],"drawType":"Line"}]},{"percentage":"0.1","name":"Relative Strength","indicators":[{"pivot":"0","drawStyle":"RelStrengthLine","name":"relativeStrength","data":[null,null,null,null,null,null,null,null,null,null,null,null,null,"0.88","0.83","0.83","0.83","0.85","0.86","0.92","0.95","0.97","0.99","0.99","0.99","0.98","0.97","0.95","0.92","0.90","0.88","0.90","0.90","0.89","0.90","0.93","0.99","0.98","0.96","0.93","0.93","0.99","0.99","0.98","0.96","0.95","0.94","0.90","0.81","0.78","0.76","0.78","0.80","0.78","0.74","0.61","0.41","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00","0.00"],"drawType":"Line"}]},{"percentage":"0.06","name":"Chaikin Power Gauge","indicators":[{"pivot":"0","drawStyle":"PGRRibbon","name":"Chaikin Power Gauge","data":["-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","3","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1"],"drawType":"Ribbon"}]}],"type":"1","numBars":"250","Start Date":"2014-02-11"}
		var historicChartData123=formatData(staticData);
		var cmfConfigurations={"fieldName":"cmf",'data':historicChartData123};
		var lineConfigurations={'data':historicChartData123,"highFieldName":"High","closeFieldName":"Close","lowFieldName":"Low","Trend":"Trend","LowBand":"LowBand","HighBand":"HighBand","Band":"Band"};
		var pgrColorMap={"-1": "grey",
		"0":"white",
		"1": "#b41923",
        "2": "#b41923",
        "3": "#fed833",
        "4": "#15b328",
        "5": "#15b328"};
		
		var pgrConfiguration={'data':historicChartData123,'pgrFieldName':'PowerGauge','pgrColorMap':pgrColorMap};
		
		var dateArray=[];
		$(historicChartData123).each(function(i,obj){
			dateArray.push(obj.date);
		})
		//(id,data,cmfConfigurations,lineChartConfiguration,powerGauageChartConfiguration)
		StockMarketChartManager.drawStockMarketCharts("historicalDataChart",historicChartData,cmfConfigurations,lineConfigurations,pgrConfiguration,dateArray);
		//StockMarketChartManager.drawHLCChart(lineChartConfiguration)
		//mouseOver();
	}
	
	function formatData(d){
		 var prices = d.slices[0].indicators[4].data;
                var highBandData = d.slices[0].indicators[0].data;
                var lowBandData = d.slices[0].indicators[1].data;
                var bandData = d.slices[0].indicators[5].data;
                var signalData = d.slices[0].indicators[2].data;
                var trendData = d.slices[0].indicators[3].data;
                var moneyFlowData = d.slices[1].indicators[0].data;
                var overboughtOversoldData = d.slices[2].indicators[0].data;
                var obosReferenceLines = d.slices[2].referencelines;
                var relativeStrengthData = d.slices[3].indicators[0].data;
                var powerGaugeData = d.slices[4].indicators[0].data;
                
                var data = parseData({
                    prices: prices,
                    highBandData: highBandData,
                    lowBandData: lowBandData,
                    bandData: bandData,
                    signalData: signalData,
                    trendData: trendData,
                    moneyFlowData: moneyFlowData,
                    overboughtOversoldData: overboughtOversoldData,
                    relativeStrengthData: relativeStrengthData,
                    powerGaugeData: powerGaugeData
                }, d.dates);

                for (var i = 0; i < data.length; i++) {
                    data[i].timeIndex = data[i].timeIndex;
                    data[i].timestamp = (new Date(data[i].date).getTime());
                }
                data = data.sort(function (x, y) {
                    return x.timeIndex - y.timeIndex;
                });
				
		return data;
	}
	
	function parseData(data, dates) {
        var prices = data.prices.reverse();
        var highBandData = data.highBandData.reverse();
        var lowBandData = data.lowBandData.reverse();
        var bandData = data.bandData.reverse();
        var signalData = data.signalData.reverse();
        var trendData = data.trendData.reverse();
        var moneyFlowData = data.moneyFlowData.reverse();
        var overboughtOversoldData = data.overboughtOversoldData.reverse();
        var relativeStrengthData = data.relativeStrengthData.reverse();
        var powerGaugeData = data.powerGaugeData.reverse();
        var interval = data.interval;
        dates = dates.reverse();

        var parsedData = [];
        var marketDayCtr = 0;
        for (var i = 0; i < prices.length; i++) {
            //(function (datum, index) {
				var datum=prices[i];
                var split = datum.split(",");
				var index=i;
                parsedData.push({
                    High: parseFloat(split[0]),
                    Low: parseFloat(split[1]),
                    Close: parseFloat(split[2]),
                    date: dates[i],//parseDate1(dates[i]),
                    timeIndex: i,
                    HighBand: parseFloat(highBandData[index]),
                    LowBand: parseFloat(lowBandData[index]),
                    Band: parseFloat(bandData[index]),
                    //Signal: SignalService.toInt(signalData[index]),
                    //Signal: signalData[index],
                    Trend: parseFloat(trendData[index]),
                    cmf: parseFloat(moneyFlowData[index]),
                    OverboughtOversold: parseFloat(overboughtOversoldData[index]),
                    RelativeStrength: parseFloat(relativeStrengthData[index]),
                    PowerGauge: parseFloat(powerGaugeData[index])
                });
            //})(prices[i], i);
        }

        return parsedData;
    }
	
	function parseDate1(input) {
      var parts = input.match(/(\d+)/g);
      return new Date(parts[0], parts[1]-1, parts[2]);
    }
	
	function getDatumForTime(time){
		//alert(time.toString() +" type "+(typeof time));
		//time=time.toString();
		//var hoverDate=new Date(time);
		
		var year=time.getFullYear();
		var month=time.getMonth()+1;
		var day=time.getDate();
		if(month<10){
			month="0"+month;
		}
		if(day<10){
			day="0"+day;
		}
		
		var desiredDate=year+"-"+month+"-"+day;
		
		for(var i=0;i<historicChartData.length;i++){
			if(historicChartData[i].timeIndex==desiredDate ){
				//console.error("matched");
				return historicChartData[i];
			}
			else{
//				console.error("date hover "+desiredDate +" : date val "+historicChartData[i].timeIndex);
			}
		}
		
		
	}
	
	var timeAxisSvg;
	function buildTimeAxisForHistoricChart(){
		var heightOfTimeAxisSvg=100;
		timeAxisSvg=d3.selectAll('#timeAxisForHistoricalData').append('svg')
		.attr('width',historicalChartWidth)
		.attr('height',heightOfTimeAxisSvg);
		
		timeAxisSvg.append("g")			// Add the X Axis
			.attr("class", "xAxisHistoryChart")
			.attr("transform", "translate(0," + (heightOfTimeAxisSvg/2) + ")")
			.call(xAxisHistoricCharts);
		
	}
	function redraw(){
		var	closeLine = d3.svg.line()
			.x(function(d) { return xScaleHistoricChart(d[0]); })
			.y(function(d) { return yScaleHistoricChart(d[1]); }).interpolate('basis');
			
		
		
		var demaLine=d3.svg.line()
					  .x(function(d){return xScaleHistoricChart(d[0]);})
					  .y(function(d){return yScaleHistoricChart(d[1]);}).interpolate('basis');
	}
	
	function drawCMFChart(){
		//alert("draw cmf ");
		var cmfChartHeight;
		if($scope.$parent.barChart && $scope.$parent.candleChart){
			cmfChartHeight=(historicalChartHeight/4.5);
		}
		else{
			if(!$scope.$parent.barChart && !$scope.$parent.candleChart){
				cmfChartHeight=(historicalChartHeight);
			}
			else{
				if(!$scope.$parent.candleChart){
					cmfChartHeight=(historicalChartHeight/3.5);
				}
				else{
					cmfChartHeight=(historicalChartHeight/3);
				}
			}
		}
		//var cmfChartHeight=(historicalChartHeight/5);
		var cmfChartSvg = d3.select("#cmf")
            .append("svg:svg")
            .attr("class", "cmChart")
            .attr("width",historicalChartWidth)
            .attr("height",cmfChartHeight+margin.bottom );
		
		var moneyFlowArray=new Array();
		for(var i=0;i<historicChartData.length;i++){
			if(historicChartData[i].cmf != "N/A"){
				moneyFlowArray.push(historicChartData[i].cmf);
			}
		}
		
		moneyFlowArray.sort(function(a,b){
			if(a>b){
				return 1; 
			}
			else if(b>a){
				return -1;
			}
			else{
				return 0;
			}
		});
		var min=moneyFlowArray[0];
		var max=moneyFlowArray[moneyFlowArray.length-1];
		
		
		
		//var xScaleCmf=d3.scale.linear().range([0, (historicalChartWidth*scalableLimit)]).domain([historicChartData[0].timeIndex1,historicChartData[historicChartData.length-1].timeIndex1]);
		yScaleCmfChart = d3.scale.linear()
		.domain([min,max])
		.range([cmfChartHeight, 0]);
		
		var clipCMF = cmfChartSvg.append("defs").append("svg:clipPath")
		.attr("id", "clip2")
		.append("svg:rect")
		.attr("id", "clip-rect")
		.attr("x", "0")
		.attr("y", "0")
		.attr("width", historicalChartWidth-margin.right)
		.attr("height",cmfChartHeight);	
		
		var cmfClipGrouping=cmfChartSvg.append('g').attr("clip-path", "url(#clip1)").attr("transform", "translate(0," + (margin.top) + ")");
		
		area = d3.svg.area()
			.x(function (d) {
				return xScaleHistoricChart(parseDate.parse(d.timeIndex));
			})
			.y0(yScaleCmfChart(0))
			.y1(function (d) {
				
				if(d.cmf!="N/A"){
					
					return yScaleCmfChart(d.cmf);
				}else{
					
					return yScaleCmfChart(0);
				}
				
			})
			.interpolate("basis");
		var gradient = cmfChartSvg.append("svg:defs")
		.append("svg:linearGradient")
		.attr("id", "gradient")
		.attr("x1", "0%")
		.attr("y1", yScaleCmfChart(min))
		.attr("x2", "100%")
		.attr("y2", yScaleCmfChart(max))
		.attr("gradientUnits", "userSpaceOnUse");
		
		gradient
            .append("stop")
            .attr("offset", "0")
            .attr("stop-color", "#b41923");
        gradient
            .append("stop")
            .attr("offset", "0.25")
            .attr("stop-color", "#c74b27");
        gradient
            .append("stop")
            .attr("offset", "0.5")
            .attr("stop-color", "#f9cd32");

        gradient
            .append("stop")
            .attr("offset", ".75")
            .attr("stop-color", "#5fbf2c");
        gradient
            .append("stop")
            .attr("offset", "1")
            .attr("stop-color", "#15b328");

		cmfClipGrouping.append("path")
                    .data([historicChartData])
					.attr("class","money-flow-area ")
					.style('fill','url(#gradient)')
                    .attr("d", function(d){ return area(d)});
		
		turningPoints = [0];
		
        cmfChartSvg.append("text")
            .attr("class", "yrule")
            .attr("x", (historicalChartWidth))
            .attr("y", yScaleCmfChart(0)+margin.top)
            .attr("dy", 0)
            .attr("dx", 0)
            .attr("text-anchor", "end")
            .text("0.00");
		
		function sign(x) {
            return x > 0 ? 1 : x < 0 ? -1 : 0;
        }

	}
	
	function redrawCmf(){
		$('.money-flow-area').html('');
		var alternatingStyle = historicChartData[0].cmf > 0;
        var lastMidPointTimeStamp;
		turningPoints = [0];
		function sign(x) {
            return x > 0 ? 1 : x < 0 ? -1 : 0;
        }
		
        $(historicChartData).each(function (index, datum) {
            if (index > 0) {
				if(!isNaN(historicChartData[index - 1].cmf) && !isNaN(datum.cmf)){
                if (sign(historicChartData[index - 1].cmf) != sign(datum.cmf) && datum.cmf != 0) {
                    turningPoints.push(index);
                }
            }
				else{
					turningPoints.push(index);
				}
            }
        });
		
        $(turningPoints).each(function (index, tp0) {
            var subset;
            if (index != turningPoints.length - 1) {
                var tp1 = turningPoints[index + 1];
				//console.log("INDEX "+index + "index next  "+(index+1));
                subset = historicChartData.slice(tp0, tp1);
                
				var mFlow;
				if(tp1!=tp0 && tp1!=historicChartData.length-1){
					// < data.length - 1){
					mFlow=0;
				}
				else{
					if(historicChartData[tp1].cmf=="N/A"){
						mFlow=0;
					}
					else{
						mFlow=historicChartData[tp1].cmf;
					}
				}
				
				if(historicChartData[tp0].cmf == "N/A"){
					alternatingStyle=historicChartData[tp1].cmf >= 0;
				}
				else{	
              	
                  alternatingStyle=historicChartData[tp0].cmf >= 0;
				}
                var area = d3.svg.area()
                    .x(function (d) {
						return xScaleHistoricChart(parseDate.parse(d.timeIndex));
                    })
                    .y0(yScaleCmfChart(0))
                    .y1(function (d) {
						
						if(d.cmf!="N/A"){
							
                        return yScaleCmfChart(d.cmf);
						}else{
							
							return yScaleCmfChart(0);
						}
                        
                    })
                    .interpolate("basis");

                d3.selectAll(".money-flow-area ")
                    .datum(subset)
					.attr("d", area(subset));	
			}
		});	
	}
	
	function drawCloseDifferenceChart(){
		var changeCloseChartHeight;
		
		if($scope.$parent.barChart && $scope.$parent.areaChart){
			changeCloseChartHeight=(historicalChartHeight/1.7);
		}
		else{
			if(!$scope.$parent.barChart && !$scope.$parent.areaChart){
				changeCloseChartHeight=historicalChartHeight;
			}
			else{
				if(!$scope.$parent.barChart){
					changeCloseChartHeight=(historicalChartHeight/1.5);
				}
				else if(!$scope.$parent.areaChart){
					changeCloseChartHeight=(historicalChartHeight/1.5);
				}
				else{
					changeCloseChartHeight=(historicalChartHeight/2);
				}
			}
		}
		
	   var minYCloseDifference=	d3.min(historicChartData.map(function(d){
			return d.close;
	   }));
	   minYCloseDifference=minYCloseDifference-1;
	   var maxYCloseDifference=d3.max(historicChartData.map(function(d){
			return d.close;
	   }));
	   maxYCloseDifference=maxYCloseDifference+1;
	   
	   yScaleCloseDifference=d3.scale.linear().range([(changeCloseChartHeight), 0]).domain([minYCloseDifference,maxYCloseDifference]).nice();	
	   
		
	   //draw close line difference rect
	   
	   closeDifferenceSvg=d3.select('#closePriceDifferenceChartDiv').append('svg')
							.attr('width',historicalChartWidth)
							.attr('height',changeCloseChartHeight+margin.bottom).attr('cursor','move')
							.append('g').attr('transform','translate(0,-50)');
		
		var clipCloseDifference = closeDifferenceSvg.append("defs").append("svg:clipPath")
		.attr("id", "clip1")
		.append("svg:rect")
		.attr("id", "clip-rect")
		.attr("x", "0")
		.attr("y", "0")
		.attr("width", historicalChartWidth-margin.right)
		.attr("height",changeCloseChartHeight);	
		
		// Add the Y Axis
		var ticksArray=[];
		var min=d3.min(closeDataArray.map(function(d){
		
			return d.close;
		}));
		
		var max=d3.max(closeDataArray.map(function(d){
		
			return d.close;
		}));
		var midTickVal=(closeDataArray[0]+closeDataArray[closeDataArray.length-1])/2;
		
		ticksArray.push(closeDataArray[0]);
		ticksArray.push(midTickVal);
		ticksArray.push(closeDataArray[closeDataArray.length-1]);	
		
		//alert("val "+closeDataArray[closeDataArray.length/2]+" val"+Math.floor(closeDataArray.length/2));
		var yAxiscloseDifference= d3.svg.axis().scale(yScaleCloseDifference)
		.orient("right").tickValues(ticksArray).tickFormat(function(d) { return "-"+ d;});
		//alert(margin.right);
		closeDifferenceSvg.append("g")			// Add the Y Axis
			.attr("id", "yAxisCloseDifference")
			.attr('transform','translate('+(historicalChartWidth-margin.right)+',0)')
			.call(yAxiscloseDifference);
		//xscale
		
		var cliping=	closeDifferenceSvg.append('g').attr("clip-path", "url(#clip1)");
		
	   cliping.selectAll('.closePriceDifferenceRect')
	   .data(historicChartData)
	   .enter()
	   .append('image')
	  // .attr("clip-path", "url(#clip1)")
	  
	   .attr('class',"closePriceDifferenceRect")
	   .attr("xlink:href", function(d,i){ 
			//console.log("image "+d.image);
			if(i== 0){
				return "";
			}
			else{
				if(d.close>historicChartData[i-1].close){
					return "greencandle.png";
				}
				else{
					return "redcandle.png";
				}
			}
		})
	   .attr('x',function(d,i){
			if(i==0){
				return 0;
			}
			else{
				
				return xScaleHistoricChart(parseDate.parse(historicChartData[i].timeIndex));
			}
	   })
	   .attr('y',function(d,i){
			if(i==0){
				return 0;
			}
			else{
				return yScaleCloseDifference(d.close);
			}
	   })
	   .attr('width',function(d,i){
			return ((historicalChartWidth*scalableLimit-historicalChartWidth)/historicChartData.length);
			
	   })
	   
	   .attr('height','0')
	   .transition()
	   .duration(1000)
	   .attr('height',function(d,i){
			if(i==0){
				return 0;
			}
			else{
				return Math.abs(yScaleCloseDifference(d.close)-yScaleCloseDifference(historicChartData[i-1].close));
			}
	   });
	
	}
	function generateXScale(){
		xMin=d3.min(dateArray.map( function(d) { return parseDate.parse(d);}));
		xMax=d3.max(dateArray.map(function(d) { return parseDate.parse(d);}));
		xScaleHistoricChart=d3.time.scale().range([0, (historicalChartWidth*scalableLimit)]).domain([xMin,xMax]);
		
		xAxisHistoricCharts = d3.svg.axis().scale(xScaleHistoricChart)
		.orient("bottom").ticks(10).tickFormat(formatDate);
		
	}
	function drawXAxis(){
		
		//var totalChartHeight=$('#closePriceDifferenceChartDiv').height();//$('#cmf').height()+$('#closeDemaChartDiv').height()+$('#closePriceDifferenceChartDiv').height();
		$('#timeAxisForHistoricalData').html('');
		
		d3.select('#timeAxisForHistoricalData')
		.append('svg')
		.attr('width',historicalChartWidth)
		.attr('height',50).append("g")
		.attr('id','xAxisCloseDifference')
		//.attr("transform", "translate(0," + (totalChartHeight-23) + ")")
		.attr("clip-path", "url(#clip1)")
		.call(xAxisHistoricCharts);
		/*
		closeDifferenceSvg.append("g")
		.attr('id','xAxisCloseDifference')
		.attr("transform", "translate(0," + (totalChartHeight-23) + ")")
		.attr("clip-path", "url(#clip1)")
		.call(xAxisHistoricCharts);
		*/
	}
	
	function drawCloseDemaChart(){
		var closeDemaChartHeight;
		//var closeDemaChartHeight=(historicalChartHeight/5);
		if($scope.$parent.areaChart && $scope.$parent.candleChart){
			closeDemaChartHeight=(historicalChartHeight/5);
		}
		else{
			if(!$scope.$parent.areaChart && !$scope.$parent.candleChart){
				closeDemaChartHeight=(historicalChartHeight);
			}
			else{
				if(!$scope.$parent.candleChart){
					closeDemaChartHeight=(historicalChartHeight/1.5);
				}
				else{
					closeDemaChartHeight=(historicalChartHeight/3);
				}
				
			}
		}
		
		if(d3.max(closeDataArray, function(d) { return d; })>d3.max(demaDataArray, function(d) { return d; })){
			historicChartMaxY=d3.max(closeDataArray, function(d) { return d; });
		}
		else{
			historicChartMaxY=d3.max(demaDataArray, function(d) { return d; });
			
		}
		
		
		if(d3.min(closeDataArray, function(d) { return d; })<d3.min(demaDataArray, function(d) { return d; })){
			historicChartMinY=d3.min(closeDataArray.map(function(d) { return d; }));
		}
		else{
			historicChartMinY=d3.min(demaDataArray.map(function(d) { return d; }));
		}
		var tickMin=historicChartMinY;
		//fhistoricChartMinY=historicChartMinY-20;
		
		yScaleHistoricChart=d3.scale.linear().range([(closeDemaChartHeight), 0]).domain([historicChartMinY,historicChartMaxY]).nice();
		console.log("min y "+historicChartMinY);	
		
		//panningAndZooming=d3.behavior.zoom().x(xScaleHistoricChart).scaleExtent([1, 8]).on("zoom", zoom);					
		
		var closeDemaTicksArray=[];
		closeDemaTicksArray.push(tickMin);
		closeDemaTicksArray.push(historicChartMaxY)
		var r=(historicChartMaxY+tickMin)/2;
		closeDemaTicksArray.push(r);
		
		//MARKING TICKS 6 FOR SPACING AMONG THEM
		yAxisHistoricChart= d3.svg.axis().scale(yScaleHistoricChart)
		.orient("right").tickValues(closeDemaTicksArray).tickFormat(function(d) { return "-"+ d;});
		
		// Define the line
		
		demaLine=d3.svg.line()
					  .x(function(d){return xScaleHistoricChart(parseDate.parse(d.timeIndex));})
					  .y(function(d){return yScaleHistoricChart(d.dema);}).interpolate('cardinal');
		
		//d3.select('#historicalDataChart').call(panningAndZooming)
		
		historicChartSvg=d3.select('#closeDemaChartDiv').append('svg')
							.attr('width',historicalChartWidth)
							.attr('height',(closeDemaChartHeight+margin.bottom+10)).attr('cursor','move')
							.append('g').attr("transform", "translate(0,10 )");
		
		
		var clip = historicChartSvg.append("defs").append("svg:clipPath")
		.attr("id", "clip1")
		.append("svg:rect")
		.attr("id", "clip-rect")
		.attr("x", "0")
		.attr("y", "0")
		.attr("width", historicalChartWidth-margin.right)
		.attr("height",closeDemaChartHeight);
	
		// Add the Y Axis
		historicChartSvg.append("g")			// Add the Y Axis
			.attr("id", "yAxisHistoryChart")
			.attr('transform','translate('+(historicalChartWidth-margin.right)+',0)')
			.call(yAxisHistoricChart);			  
		
		
		var clippingPath=historicChartSvg.append("g").attr("clip-path", "url(#clip1)");
		
	    clippingPath.selectAll('.closeBar').data(historicChartData).enter().append('rect')
					.attr('class','closeBar')
					.attr('x',function(d){
						return xScaleHistoricChart(parseDate.parse(d.timeIndex));
					})
					.attr('y',function(d){
						return yScaleHistoricChart(d.close);
					})
					.attr('width',function(d){
						return ((historicalChartWidth*scalableLimit-historicalChartWidth)/historicChartData.length);
					})
					.attr('fill','white')
					.attr('height','0')
					.transition()
					.duration(1000)
					.attr('fill',function(d,i){
								return "#3f97fe";
						//return "rgb("+((i+1) * 1)+", "+((i+1)  * 2)+", " + ((i+1)  * 10) + ")";
					})	
					.attr('height',function(d){
						try{
						//console.log(Math.abs(yScaleHistoricChart(d.close)-yScaleHistoricChart(historicChartMinY)));
						//alert("close current "+yScaleClose(d.close)+" close min "+yScaleClose(closeMin));
						return Math.abs(yScaleHistoricChart(d.close)-yScaleHistoricChart(historicChartMinY));
						}
						catch(err){
						console.error("current close "+d.close +"  min close "+historicChartMinY);
							return 0;
						}
					});
					
	   clippingPath.append('path')
	   .attr('class','historicLineDema')
	   .attr('d',demaLine(historicChartData))
	   .attr('fill','none');
	}
	var pos={};
	$scope.showHistoricChartToolTip=false;
	/*
	function mouseOver(){
		$("#historicalDataChart").mouseover("mousemove", function (e) {
			var x;
			if(e.offsetX != undefined){
				x = e.offsetX;
			}
			else{
				x=e.pageX-$('#historicalDataChart').offset().left
			}
			
			left = x + this.offsetLeft;
			var datum = getDatumForTime(xScaleHistoricChart.invert(left));
			//console.log("left "+left +"    width "+(historicalChartWidth*scalableLimit-historicalChartWidth) +" offset "+$('#historicalDataChart').offset().left +" offset y "+e.offsetY);
			if(datum && (left-($('#historicalDataChart').offset().left)/1.5)<(historicalChartWidth*scalableLimit-historicalChartWidth)){
				
				$scope.showHistoricChartToolTip=true;
				$('#timeValue').html(datum.timeIndex+", "+datum.close+", "+datum.dema+", "+datum.cmf);
				//console.log("show tool tip ");
				$scope.$apply();
				
			}
			else{
				$scope.showHistoricChartToolTip=false;
				//console.log("dont show ");
				$scope.$apply();
			}
			var topVal;
			if((e.offsetY-350)<0){
				topVal=e.offsetY-350;
			}
			else{
				topVal=e.offsetY;
			}
			$('#dataPanel').css('margin-left',x);
			$('#dataPanel').css('margin-top',topVal);
					
		});
	}
	
	*/
	
	function getHistoricData(){
		
		if($scope.symbol){
			$scope.$parent.symbol=$scope.$parent.symbol.toUpperCase();
		}
		else{
			$scope.$parent.symbol='AAPL';
		}
		var interVal=$scope.$parent.historicChartInterval;
		var startDate;
		var endDate;
		var lastIndex
		if(interVal.indexOf("M")!=-1){
			lastIndex=interVal.indexOf("M");
			interVal=interVal.substring(0,lastIndex);
			startDate=getDate('start',interVal,true);
			
		}
		else {
			lastIndex=interVal.indexOf("Y");
			interVal=interVal.substring(0,lastIndex);
			startDate=getDate('start',interVal,false);
		}
		
		//alert(interVal);
		endDate=getDate('end','',false);
		
		$.ajax({
			type: "GET",
			//url: "http://app.chaikinpowertools.com/CPTRestSecure/app/sessionless/getPowerTrendChartData?symbol="+ symbol+"&startDate="+startDate+"&endDate="+endDate,          
			url:"http://app.chaikinpowertools.com/CPTRestSecure/app/sessionless/getCMFChartData?symbol="+$scope.$parent.symbol+"&startDate="+startDate+"&endDate="+endDate+"&=00000",          
			dataType:'json',
			crossDomain: true,
			async: true,
		
			success: function(data,status){
				historicChartData=[];
				closeDataArray=data.close_price;
				dateArray=data.calculations_date;
				demaDataArray=data.dema;
				cmfDataArray=data.cmf;
				//alert('cmf '+cmfDataArray.length);
				//alert(closeDataArray.length +"  "+dateArray.length +" "+demaDataArray.length);
				for(var i=0;i<dateArray.length;i++){
					historicChartData.push({'close':closeDataArray[i],'dema':demaDataArray[i],'timeIndex':dateArray[i],'cmf':cmfDataArray[i],'timeIndex1':i});
				}
				initialiseChart();
			},
			error:function(data,status){
				alert('failure ');
			}
		});
	}
	
	function getDate(dateType,interVal,interValInMonth){
		var jsonMonthDayMap=JSON.parse('{"1":"31","3":"93","6":"186"}');
		var jsonMapYear=JSON.parse('{"1":"365"}');
		var todayDate=new Date();
		var dateValue;
		var months = new Array('01','02','03','04','05','06','07','08','09','10','11','12');
		if(dateType=="start"){
			if(interValInMonth){
				interVal=parseInt(interVal);
				todayDate= new Date(todayDate.getTime() -parseInt(jsonMonthDayMap[interVal]) *24*60*60*1000);
			}
			else{
				todayDate= new Date(todayDate.getTime() -parseInt(jsonMapYear[interVal]) *24*60*60*1000);
			}
			
		}
		var date = ((todayDate.getDate()<10) ? "0" : "")+ todayDate.getDate();
		dateValue =  todayDate.getFullYear()+"-" +months[todayDate.getMonth()] + "-" + date;
		return dateValue;
		
	}
	
	function getYearInInteger(number) {
		return (number < 1000) ? number + 1900 : number;
	}
	
	function zoom() {
		var t = panningAndZooming.translate(),
		tx = t[0],
		ty = t[1];

		tx = Math.min(tx, 0);
		tx = Math.max(tx, historicalChartWidth -( scalableLimit*historicalChartWidth) );
		panningAndZooming.translate([tx, ty]);
		 //panningAndZooming.translate([tx, d3.event.translate[1]]);
		 //if(d3.event.translate[0] > xScaleHistoricChart(xMax)) {
		d3.select("#xAxisCloseDifference").call(xAxisHistoricCharts);
		//historicChartSvg.select("yAxisHistoryChart").call(yAxisHistoricChart);
		//historicChartSvg.select(".historicLineClose").attr('d',closeLine(historicChartData));
		historicChartSvg.select(".historicLineDema").attr('d',demaLine(historicChartData));
		d3.selectAll('.closePriceDifferenceRect').data(historicChartData)
		.attr('x',function(d){ //console.log("update rect");
		return xScaleHistoricChart(parseDate.parse(d.timeIndex));})
		.attr('y',function(d){ return yScaleCloseDifference(d.close);});
		
		d3.selectAll('.closeBar').data(historicChartData)
					.attr('x',function(d){
						return xScaleHistoricChart(parseDate.parse(d.timeIndex));
					})
					.attr('y',function(d){
						return yScaleHistoricChart(d.close);
					});
		d3.selectAll('.money-flow-area ').data([historicChartData]).attr('d',function(d){return area(historicChartData);});
		console.log('clicked ');
		
	
	} 

});